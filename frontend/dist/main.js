/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const userName = localStorage.getItem('userName');\r\nconst userPassword = localStorage.getItem('userPassword');\r\nconst userId = Number(localStorage.getItem('userId'));\r\n\r\nconst tasksView = document.getElementById('tasks-view');\r\n\r\nlet generalTaskList = [];\r\nlet statusList = [];\r\n\r\nconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\nconst currentDate = new Date();\r\nlet focusYear = currentDate.getFullYear();\r\nlet focusMonth = currentDate.getMonth();\r\n\r\nclass Day {\r\n    static currentDayId = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()).getTime();\r\n    static selectedDay = null;\r\n\r\n    constructor(year, month, day, isOffset=false) {\r\n        this.date = new Date(year, month, day);\r\n        this.id = this.date.getTime();\r\n\r\n        this.cell = document.createElement('div');\r\n        this.cell.classList.add('day');\r\n        this.cell.textContent = this.date.getDate();\r\n\r\n        if (isOffset)\r\n            this.cell.classList.add('offset');\r\n\r\n        if (this.id == Day.currentDayId)\r\n            this.cell.classList.add('current');\r\n\r\n        if (Day.selectedDay != null) {\r\n            if (this.id == Day.selectedDay.id) {\r\n                this.select();\r\n            }\r\n        }\r\n\r\n        this.cell.addEventListener('click', () => { this.toggleSelection(); }, true);\r\n        calendarMain.appendChild(this.cell);\r\n    }\r\n\r\n    toggleSelection() {\r\n        if (Day.selectedDay === null) { // nothing is selected\r\n            this.select();\r\n            return;\r\n        }\r\n\r\n        if (Day.selectedDay.id === this.id) { // this is selected\r\n            Day.selectedDay = null;\r\n\r\n            taskView.replaceChildren();\r\n            for (let i = 0; i < generalTaskList.length; i++) {\r\n                new Task(generalTaskList[i]);\r\n            }\r\n\r\n            this.deselect();\r\n            return;\r\n        }\r\n\r\n        Day.selectedDay.deselect();\r\n        this.select();\r\n    }\r\n\r\n    select() {\r\n        Day.selectedDay = this;\r\n        this.cell.classList.add('selected');\r\n\r\n        let tasksOfDay = generalTaskList.filter((task) => {\r\n            let nextDayMs = this.date.getTime() + 86400000;\r\n            return (task.deadline > this.date.getTime()) && (task.deadline < nextDayMs);\r\n        });\r\n\r\n        tasksView.replaceChildren();\r\n\r\n        for (let i = 0; i < tasksOfDay.length; i++) {\r\n            new Task(tasksOfDay[i]);\r\n        }\r\n    }\r\n\r\n    deselect() {\r\n        this.cell.classList.remove('selected');\r\n    }\r\n}\r\n\r\nclass Task {\r\n    /*\r\n    * taskObject:\r\n    * id:         int\r\n    * userId:     int\r\n    * title:      string\r\n    * contents:   string\r\n    * dateTime:   Date\r\n    * tagIds:     array\r\n    * statusId:   int\r\n    */\r\n    constructor(taskObject) {\r\n        this.taskClone = this.cloneTask();\r\n\r\n        this.id = taskObject.id;\r\n\r\n        this.title = this.taskClone.querySelector('#template-title');\r\n        this.title.id = `title-${this.id}`;\r\n        this.title.value = taskObject.title;\r\n\r\n        this.contents = this.taskClone.querySelector('#template-contents');\r\n        this.contents.id = `contents-${this.id}`;\r\n        this.contents.textContent = taskObject.contents;\r\n\r\n        this.deleteTaskButton = this.taskClone.querySelector('#template-delete');\r\n        this.deleteTaskButton.id = `delete-${this.id}`;\r\n        this.deleteTaskButton.addEventListener('click', () => { this.delete(); }, true);\r\n\r\n        this.saveTaskButton = this.taskClone.querySelector('#template-save');\r\n        this.saveTaskButton.id = `delete-${this.id}`;\r\n        this.saveTaskButton.addEventListener('click', () => { this.save(); }, true);\r\n\r\n        let status = resolveStatus(taskObject.statusId);\r\n        this.statusSelector = this.taskClone.querySelector('#template-status');\r\n        this.statusSelector.id = `status-${this.id}`;\r\n        this.addStatusOptions();\r\n        this.statusSelector.value = status.name;\r\n        this.taskClone.style.borderColor = status.color;\r\n\r\n        this.dateSelector = this.taskClone.querySelector('#template-datetime');\r\n        this.dateSelector.id = `datetime-${this.id}`;\r\n        this.dateSelector.valueAsNumber = taskObject.deadline ? taskObject.deadline : new Date();\r\n\r\n        this.taskClone.style.display = 'flex';\r\n        tasksView.appendChild(this.taskClone);\r\n    }\r\n\r\n    cloneTask() {\r\n        let taskTemplateParent = document.getElementById('parent');\r\n        let taskTemplate = taskTemplateParent.querySelector('.task-wrapper');\r\n        let taskClone = taskTemplate.cloneNode(true);\r\n        return taskClone;\r\n    }\r\n\r\n    addStatusOptions() {\r\n        for (let i = 0; i < statusList.length; i++) {\r\n            let taskStatus = document.createElement('option');\r\n            taskStatus.textContent = statusList[i].name;\r\n            taskStatus.id = statusList[i].id;\r\n            this.statusSelector.appendChild(taskStatus);\r\n        }\r\n    }\r\n\r\n    async delete() {\r\n        let requestParams = {\r\n            method: 'DELETE',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                'id': this.id\r\n            })\r\n        }\r\n\r\n        let res = await fetch('http://localhost:3000/tasks/delete', requestParams);\r\n        tasksView.removeChild(this.taskClone);\r\n    }\r\n\r\n    async save() {\r\n        let requestParams = {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.object())\r\n        }\r\n\r\n        let res = await fetch('http://localhost:3000/tasks/update', requestParams);\r\n    }\r\n\r\n    object() {\r\n        let status = this.statusSelector.options[this.statusSelector.selectedIndex];\r\n        let deadline =  this.dateSelector.valueAsNumber;\r\n\r\n        return {\r\n            'id': this.id,\r\n            'userId': userId,\r\n            'title': this.title.value,\r\n            'contents': this.contents.value,\r\n            'deadline': deadline,\r\n            'tagIds': [],\r\n            'statusId': Number(status.id)\r\n        }\r\n    }\r\n}\r\n\r\nconst calendarMain = document.getElementById('calendar-main');\r\nconst focusMonthDisplay = document.getElementById('focus-month-display');\r\nconst taskView = document.getElementById('tasks-view');\r\n\r\nconst createTaskFormBackground = document.getElementById('create-task-form-background');\r\nconst createTaskForm = document.getElementById('create-task-form');\r\nconst createTaskFormWrapper = document.getElementById('create-task-form-wrapper');\r\nconst createTaskFormStatusSelector = document.getElementById('create-task-form-status');\r\n\r\nconst createStatusForm = document.getElementById('create-status-form');\r\nconst createStatusFormWrapper = document.getElementById('create-status-form-wrapper');\r\nconst createStatusFormBackground = document.getElementById('create-status-form-background');\r\n\r\nconst scrollLeftButton = document.getElementById('scroll-left');\r\nconst scrollRightButton = document.getElementById('scroll-right');\r\nconst locateCurrentMonthButton = document.getElementById('locate-current-month');\r\nconst createStatusButton = document.getElementById('create-status');\r\nconst createTaskButton = document.getElementById('create-task');\r\nconst cancelFormButton = document.getElementById('cancel-form');\r\n\r\nscrollLeftButton.addEventListener('click', scrollLeft, true);\r\nscrollRightButton.addEventListener('click', scrollRight, true);\r\nlocateCurrentMonthButton.addEventListener('click', locateCurrentMonth, true);\r\ncreateStatusButton.addEventListener('click', displayCreateStatusForm, true);\r\ncreateTaskButton.addEventListener('click', displayCreateTaskForm, true);\r\ncreateStatusFormBackground.addEventListener('click', (event) => { hideForm(event, createStatusFormWrapper, createStatusFormBackground); }, true);\r\ncreateTaskFormBackground.addEventListener('click', (event) => { hideForm(event, createTaskFormWrapper, createTaskFormBackground); }, true);\r\n// cancelFormButton.addEventListener('click', (event) => { hideForm(event) }, true);\r\n\r\ncreateStatusForm.addEventListener('submit', async (event) => {\r\n    event.preventDefault();\r\n    const errorDisplay = document.getElementById('create-task-status-error-display');\r\n\r\n    let newStatusName = document.getElementById('create-status-form-name');\r\n    let newStatusColorPicker = document.getElementById('create-status-form-color-picker');\r\n\r\n    let requestParams = {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            'userId': userId,\r\n            'name': newStatusName.value,\r\n            'color': newStatusColorPicker.value\r\n        })\r\n    }\r\n\r\n    console.log(requestParams);\r\n\r\n    const res = await fetch('http://localhost:3000/statuses/create', requestParams);\r\n    \r\n    if (!res.ok) {\r\n        const body = await res.json();\r\n        errorDisplay.textContent = body.error;\r\n    }\r\n    \r\n    hideForm(null, createStatusFormWrapper, createStatusFormBackground);\r\n    return;\r\n});\r\n\r\ncreateTaskForm.addEventListener('submit', async (event) => {\r\n    event.preventDefault();\r\n    const errorDisplay = document.getElementById('create-task-form-error-display');\r\n\r\n    let newTaskTitle = document.getElementById('create-task-form-title').value;\r\n    let newTaskContents = document.getElementById('create-task-form-contents').value;\r\n    let newTaskDeadline = document.getElementById('create-task-form-date').valueAsNumber;\r\n    let newTaskStatusSelector = document.getElementById('create-task-form-status');\r\n    let newTaskStatus = newTaskStatusSelector.options[newTaskStatusSelector.selectedIndex];\r\n\r\n    let requestParams = {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            'userId': userId,\r\n            'title': newTaskTitle,\r\n            'contents': newTaskContents,\r\n            'deadline': newTaskDeadline,\r\n            'tagIds': [],\r\n            'statusId': newTaskStatus.id\r\n        })\r\n    }\r\n\r\n    const res = await fetch('http://localhost:3000/tasks/create', requestParams);\r\n    \r\n    if (!res.ok) {\r\n        const body = await res.json();\r\n        errorDisplay.textContent = body.error;\r\n    }\r\n    \r\n    hideForm(null, createTaskFormWrapper, createTaskFormBackground);\r\n    return;\r\n})\r\n\r\n\r\n\r\n/* resolves statusId to status object */\r\nfunction resolveStatus(statusId) {\r\n    return statusList.find((elem) => elem.id == statusId);\r\n}\r\n\r\nfunction hideForm(event, formWrapper, formBackground) {\r\n    if (event === null) {\r\n        formBackground.style.display = 'none';\r\n        return;\r\n    }\r\n\r\n    if (!formWrapper.contains(event.target)) {\r\n        formBackground.style.display = 'none';\r\n    }\r\n}\r\n\r\nfunction displayCreateStatusForm() {\r\n    createStatusFormBackground.style.display = 'flex';\r\n}\r\n\r\nfunction displayCreateTaskForm() {\r\n    let newTaskDeadline = document.getElementById('create-task-form-date');\r\n    let now = new Date();\r\n    let nowTruncated = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes());\r\n    newTaskDeadline.valueAsNumber = nowTruncated;\r\n    createTaskFormBackground.style.display = 'flex';\r\n}\r\n\r\nfunction locateCurrentMonth() {\r\n    fillCalendar(currentDate.getFullYear(), currentDate.getMonth());\r\n}\r\n\r\nfunction getDaysAmount(year, month) {\r\n    let date = new Date(year, month + 1, 0);\r\n    return date.getDate();\r\n}\r\n\r\nfunction getOffset(date) {\r\n    let firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\r\n    let offset = firstDay.getDay();\r\n\r\n    return offset === 0 ? 6 : offset - 1;\r\n}\r\n\r\nfunction fillCalendar(year, month) {\r\n    calendarMain.replaceChildren();\r\n    let monthToFill = new Date(year, month, 1);\r\n    daysAmount = new Date(monthToFill.getFullYear(), monthToFill.getMonth() + 1, 0).getDate();\r\n    let upperBorder = 0;\r\n\r\n    let daysInPrevMonth = getDaysAmount(year, month - 1);\r\n    \r\n    let prevMonthYear = month > 0 ? year : year - 1;\r\n    let nextMonthYear = month < 11 ? year : year + 1;\r\n\r\n    for (let i = daysInPrevMonth - getOffset(monthToFill); i < daysInPrevMonth; i++) {\r\n        upperBorder++;\r\n        new Day(prevMonthYear, month, i + 1, true);\r\n    }\r\n\r\n    for (let i = 0; i < daysAmount; i++) {\r\n        upperBorder++;\r\n        new Day(year, month, i + 1);\r\n    }\r\n\r\n    for (let i = 0; i + upperBorder < 42; i++) {\r\n        new Day(nextMonthYear, month, i + 1, true);\r\n    }\r\n\r\n    focusMonthDisplay.textContent = `${MONTHS[month]}, ${year}`;\r\n}\r\n\r\nfunction scrollLeft() {\r\n    if (focusMonth < 1) {\r\n        focusYear--;\r\n        focusMonth = 11;\r\n    }\r\n    else\r\n        focusMonth--;\r\n\r\n    fillCalendar(focusYear, focusMonth);\r\n}\r\n\r\nfunction scrollRight() {\r\n    if (focusMonth > 10) {\r\n        focusMonth = 0;\r\n        focusYear++;\r\n    }\r\n    else\r\n        focusMonth++;\r\n\r\n    fillCalendar(focusYear, focusMonth);\r\n}\r\n\r\nfillCalendar(focusYear, focusMonth);\r\n\r\nwindow.addEventListener('keypress', (event) => {\r\n    if (event.key == 'h')\r\n        scrollLeft();\r\n    else if (event.key == 'l')\r\n        scrollRight();\r\n});\r\n\r\nasync function main() {\r\n    if (userName === null || userPassword === null) {\r\n        window.location.href = './auth.html';\r\n    }\r\n\r\n    let requestParams = {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            'name': userName,\r\n            'password': userPassword\r\n        })\r\n    }\r\n\r\n    const authRes = await fetch('http://localhost:3000/login', requestParams);\r\n\r\n    if (!authRes.ok) {\r\n        window.location.href = './auth.html';\r\n    }\r\n\r\n    const authBody = await authRes.json();\r\n    let userId = authBody.id;\r\n    localStorage.setItem('userId', userId);\r\n\r\n    requestParams.body = JSON.stringify({\r\n        'userId': userId\r\n    })\r\n\r\n    const taskRes = await fetch('http://localhost:3000/tasks', requestParams);\r\n    generalTaskList = await taskRes.json();\r\n\r\n    const statusRes = await fetch('http://localhost:3000/statuses', requestParams);\r\n    statusList = await statusRes.json();\r\n\r\n    for (let i = 0; i < generalTaskList.length; i++) {\r\n        new Task(generalTaskList[i]);\r\n    }\r\n\r\n    for (let i = 0; i < statusList.length; i++) {\r\n        let taskStatus = document.createElement('option');\r\n        taskStatus.textContent = statusList[i].name;\r\n        taskStatus.id = statusList[i].id;\r\n        createTaskFormStatusSelector.appendChild(taskStatus);\r\n    }\r\n}\r\n\r\nmain();\r\n\n\n//# sourceURL=webpack://frontend/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;